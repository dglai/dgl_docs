
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/large/L2_large_link_prediction.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_large_L2_large_link_prediction.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_large_L2_large_link_prediction.py:


Stochastic Training of GNN for Link Prediction
==============================================

This tutorial will show how to train a multi-layer GraphSAGE for link
prediction on ``ogbn-arxiv`` provided by `Open Graph Benchmark
(OGB) <https://ogb.stanford.edu/>`__. The dataset
contains around 170 thousand nodes and 1 million edges.

By the end of this tutorial, you will be able to

-  Train a GNN model for link prediction on a single GPU with DGL's
   neighbor sampling components.

This tutorial assumes that you have read the :doc:`Introduction of Neighbor
Sampling for GNN Training <L0_neighbor_sampling_overview>` and :doc:`Neighbor
Sampling for Node Classification <L1_large_node_classification>`.

.. GENERATED FROM PYTHON SOURCE LINES 23-45

Link Prediction Overview
------------------------

Link prediction requires the model to predict the probability of
existence of an edge. This tutorial does so by computing a dot product
between the representations of both incident nodes.

.. math::


   \hat{y}_{u\sim v} = \sigma(h_u^T h_v)

It then minimizes the following binary cross entropy loss.

.. math::


   \mathcal{L} = -\sum_{u\sim v\in \mathcal{D}}\left( y_{u\sim v}\log(\hat{y}_{u\sim v}) + (1-y_{u\sim v})\log(1-\hat{y}_{u\sim v})) \right)

This is identical to the link prediction formulation in :doc:`the previous
tutorial on link prediction <../blitz/4_link_predict>`.


.. GENERATED FROM PYTHON SOURCE LINES 48-54

Loading Dataset
---------------

This tutorial loads the dataset from the ``ogb`` package as in the
:doc:`previous tutorial <L1_large_node_classification>`.


.. GENERATED FROM PYTHON SOURCE LINES 54-84

.. code-block:: Python


    import os

    os.environ["DGLBACKEND"] = "pytorch"
    import dgl
    import numpy as np
    import torch
    from ogb.nodeproppred import DglNodePropPredDataset

    dataset = DglNodePropPredDataset("ogbn-arxiv")
    device = "cpu"  # change to 'cuda' for GPU

    graph, node_labels = dataset[0]
    # Add reverse edges since ogbn-arxiv is unidirectional.
    graph = dgl.add_reverse_edges(graph)
    print(graph)
    print(node_labels)

    node_features = graph.ndata["feat"]
    node_labels = node_labels[:, 0]
    num_features = node_features.shape[1]
    num_classes = (node_labels.max() + 1).item()
    print("Number of classes:", num_classes)

    idx_split = dataset.get_idx_split()
    train_nids = idx_split["train"]
    valid_nids = idx_split["valid"]
    test_nids = idx_split["test"]






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Graph(num_nodes=169343, num_edges=2332486,
          ndata_schemes={'year': Scheme(shape=(1,), dtype=torch.int64), 'feat': Scheme(shape=(128,), dtype=torch.float32)}
          edata_schemes={})
    tensor([[ 4],
            [ 5],
            [28],
            ...,
            [10],
            [ 4],
            [ 1]])
    Number of classes: 40




.. GENERATED FROM PYTHON SOURCE LINES 85-105

Defining Neighbor Sampler and Data Loader in DGL
------------------------------------------------

Different from the :doc:`link prediction tutorial for full
graph <../blitz/4_link_predict>`, a common practice to train GNN on large graphs is
to iterate over the edges
in minibatches, since computing the probability of all edges is usually
impossible. For each minibatch of edges, you compute the output
representation of their incident nodes using neighbor sampling and GNN,
in a similar fashion introduced in the :doc:`large-scale node classification
tutorial <L1_large_node_classification>`.

DGL provides ``dgl.dataloading.as_edge_prediction_sampler`` to
iterate over edges for edge classification or link prediction tasks.

To perform link prediction, you need to specify a negative sampler. DGL
provides builtin negative samplers such as
``dgl.dataloading.negative_sampler.Uniform``.  Here this tutorial uniformly
draws 5 negative examples per positive example.


.. GENERATED FROM PYTHON SOURCE LINES 105-109

.. code-block:: Python


    negative_sampler = dgl.dataloading.negative_sampler.Uniform(5)









.. GENERATED FROM PYTHON SOURCE LINES 110-115

After defining the negative sampler, one can then define the edge data
loader with neighbor sampling.  To create an ``DataLoader`` for
link prediction, provide a neighbor sampler object as well as the negative
sampler object created above.


.. GENERATED FROM PYTHON SOURCE LINES 115-134

.. code-block:: Python


    sampler = dgl.dataloading.NeighborSampler([4, 4])
    sampler = dgl.dataloading.as_edge_prediction_sampler(
        sampler, negative_sampler=negative_sampler
    )
    train_dataloader = dgl.dataloading.DataLoader(
        # The following arguments are specific to DataLoader.
        graph,  # The graph
        torch.arange(graph.num_edges()),  # The edges to iterate over
        sampler,  # The neighbor sampler
        device=device,  # Put the MFGs on CPU or GPU
        # The following arguments are inherited from PyTorch DataLoader.
        batch_size=1024,  # Batch size
        shuffle=True,  # Whether to shuffle the nodes for every epoch
        drop_last=False,  # Whether to drop the last incomplete batch
        num_workers=0,  # Number of sampler processes
    )









.. GENERATED FROM PYTHON SOURCE LINES 135-138

You can peek one minibatch from ``train_dataloader`` and see what it
will give you.


.. GENERATED FROM PYTHON SOURCE LINES 138-156

.. code-block:: Python


    input_nodes, pos_graph, neg_graph, mfgs = next(iter(train_dataloader))
    print("Number of input nodes:", len(input_nodes))
    print(
        "Positive graph # nodes:",
        pos_graph.num_nodes(),
        "# edges:",
        pos_graph.num_edges(),
    )
    print(
        "Negative graph # nodes:",
        neg_graph.num_nodes(),
        "# edges:",
        neg_graph.num_edges(),
    )
    print(mfgs)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/ubuntu/regression_test/dgl/python/dgl/dataloading/dataloader.py:1149: DGLWarning: Dataloader CPU affinity opt is not enabled, consider switching it on (see enable_cpu_affinity() or CPU best practices for DGL [https://docs.dgl.ai/tutorials/cpu/cpu_best_practises.html])
      dgl_warning(
    Number of input nodes: 56696
    Positive graph # nodes: 6879 # edges: 1024
    Negative graph # nodes: 6879 # edges: 5120
    [Block(num_src_nodes=56696, num_dst_nodes=23721, num_edges=88139), Block(num_src_nodes=23721, num_dst_nodes=6879, num_edges=23958)]




.. GENERATED FROM PYTHON SOURCE LINES 157-175

The example minibatch consists of four elements.

The first element is an ID tensor for the input nodes, i.e., nodes
whose input features are needed on the first GNN layer for this minibatch.

The second element and the third element are the positive graph and the
negative graph for this minibatch.
The concept of positive and negative graphs have been introduced in the
:doc:`full-graph link prediction tutorial <../blitz/4_link_predict>`.  In minibatch
training, the positive graph and the negative graph only contain nodes
necessary for computing the pair-wise scores of positive and negative examples
in the current minibatch.

The last element is a list of :doc:`MFGs <L0_neighbor_sampling_overview>`
storing the computation dependencies for each GNN layer.
The MFGs are used to compute the GNN outputs of the nodes
involved in positive/negative graph.


.. GENERATED FROM PYTHON SOURCE LINES 178-186

Defining Model for Node Representation
--------------------------------------

The model is almost identical to the one in the :doc:`node classification
tutorial <L1_large_node_classification>`. The only difference is
that since you are doing link prediction, the output dimension will not
be the number of classes in the dataset.


.. GENERATED FROM PYTHON SOURCE LINES 186-211

.. code-block:: Python


    import torch.nn as nn
    import torch.nn.functional as F
    from dgl.nn import SAGEConv


    class Model(nn.Module):
        def __init__(self, in_feats, h_feats):
            super(Model, self).__init__()
            self.conv1 = SAGEConv(in_feats, h_feats, aggregator_type="mean")
            self.conv2 = SAGEConv(h_feats, h_feats, aggregator_type="mean")
            self.h_feats = h_feats

        def forward(self, mfgs, x):
            h_dst = x[: mfgs[0].num_dst_nodes()]
            h = self.conv1(mfgs[0], (x, h_dst))
            h = F.relu(h)
            h_dst = h[: mfgs[1].num_dst_nodes()]
            h = self.conv2(mfgs[1], (h, h_dst))
            return h


    model = Model(num_features, 128).to(device)









.. GENERATED FROM PYTHON SOURCE LINES 212-223

Defining the Score Predictor for Edges
--------------------------------------

After getting the node representation necessary for the minibatch, the
last thing to do is to predict the score of the edges and non-existent
edges in the sampled minibatch.

The following score predictor, copied from the :doc:`link prediction
tutorial <../blitz/4_link_predict>`, takes a dot product between the
incident nodes’ representations.


.. GENERATED FROM PYTHON SOURCE LINES 223-238

.. code-block:: Python


    import dgl.function as fn


    class DotPredictor(nn.Module):
        def forward(self, g, h):
            with g.local_scope():
                g.ndata["h"] = h
                # Compute a new edge feature named 'score' by a dot-product between the
                # source node feature 'h' and destination node feature 'h'.
                g.apply_edges(fn.u_dot_v("h", "h", "score"))
                # u_dot_v returns a 1-element vector for each edge so you need to squeeze it.
                return g.edata["score"][:, 0]









.. GENERATED FROM PYTHON SOURCE LINES 239-250

Evaluating Performance with Unsupervised Learning (Optional)
------------------------------------------------------------

There are various ways to evaluate the performance of link prediction.
This tutorial follows the practice of `GraphSAGE
paper <https://cs.stanford.edu/people/jure/pubs/graphsage-nips17.pdf>`__.
Basically, it first trains a GNN via link prediction, and get an embedding
for each node.  Then it trains a downstream classifier on top of this
embedding and compute the accuracy as an assessment of the embedding
quality.


.. GENERATED FROM PYTHON SOURCE LINES 253-263

To obtain the representations of all the nodes, this tutorial uses
neighbor sampling as introduced in the :doc:`node classification
tutorial <L1_large_node_classification>`.

.. note::

   If you would like to obtain node representations without
   neighbor sampling during inference, please refer to this :ref:`user
   guide <guide-minibatch-inference>`.


.. GENERATED FROM PYTHON SOURCE LINES 263-331

.. code-block:: Python



    def inference(model, graph, node_features):
        with torch.no_grad():
            nodes = torch.arange(graph.num_nodes())

            sampler = dgl.dataloading.NeighborSampler([4, 4])
            train_dataloader = dgl.dataloading.DataLoader(
                graph,
                torch.arange(graph.num_nodes()),
                sampler,
                batch_size=1024,
                shuffle=False,
                drop_last=False,
                num_workers=4,
                device=device,
            )

            result = []
            for input_nodes, output_nodes, mfgs in train_dataloader:
                # feature copy from CPU to GPU takes place here
                inputs = mfgs[0].srcdata["feat"]
                result.append(model(mfgs, inputs))

            return torch.cat(result)


    import sklearn.metrics


    def evaluate(emb, label, train_nids, valid_nids, test_nids):
        classifier = nn.Linear(emb.shape[1], num_classes).to(device)
        opt = torch.optim.LBFGS(classifier.parameters())

        def compute_loss():
            pred = classifier(emb[train_nids].to(device))
            loss = F.cross_entropy(pred, label[train_nids].to(device))
            return loss

        def closure():
            loss = compute_loss()
            opt.zero_grad()
            loss.backward()
            return loss

        prev_loss = float("inf")
        for i in range(1000):
            opt.step(closure)
            with torch.no_grad():
                loss = compute_loss().item()
                if np.abs(loss - prev_loss) < 1e-4:
                    print("Converges at iteration", i)
                    break
                else:
                    prev_loss = loss

        with torch.no_grad():
            pred = classifier(emb.to(device)).cpu()
            label = label
            valid_acc = sklearn.metrics.accuracy_score(
                label[valid_nids].numpy(), pred[valid_nids].numpy().argmax(1)
            )
            test_acc = sklearn.metrics.accuracy_score(
                label[test_nids].numpy(), pred[test_nids].numpy().argmax(1)
            )
        return valid_acc, test_acc









.. GENERATED FROM PYTHON SOURCE LINES 332-337

Defining Training Loop
----------------------

The following initializes the model and defines the optimizer.


.. GENERATED FROM PYTHON SOURCE LINES 337-345

.. code-block:: Python


    model = Model(node_features.shape[1], 128).to(device)
    predictor = DotPredictor().to(device)
    opt = torch.optim.Adam(list(model.parameters()) + list(predictor.parameters()))


    import sklearn.metrics








.. GENERATED FROM PYTHON SOURCE LINES 346-350

The following is the training loop for link prediction and
evaluation, and also saves the model that performs the best on the
validation set:


.. GENERATED FROM PYTHON SOURCE LINES 350-397

.. code-block:: Python


    import tqdm

    best_accuracy = 0
    best_model_path = "model.pt"
    for epoch in range(1):
        with tqdm.tqdm(train_dataloader) as tq:
            for step, (input_nodes, pos_graph, neg_graph, mfgs) in enumerate(tq):
                # feature copy from CPU to GPU takes place here
                inputs = mfgs[0].srcdata["feat"]

                outputs = model(mfgs, inputs)
                pos_score = predictor(pos_graph, outputs)
                neg_score = predictor(neg_graph, outputs)

                score = torch.cat([pos_score, neg_score])
                label = torch.cat(
                    [torch.ones_like(pos_score), torch.zeros_like(neg_score)]
                )
                loss = F.binary_cross_entropy_with_logits(score, label)

                opt.zero_grad()
                loss.backward()
                opt.step()

                tq.set_postfix({"loss": "%.03f" % loss.item()}, refresh=False)

                if (step + 1) % 500 == 0:
                    model.eval()
                    emb = inference(model, graph, node_features)
                    valid_acc, test_acc = evaluate(
                        emb, node_labels, train_nids, valid_nids, test_nids
                    )
                    print(
                        "Epoch {} Validation Accuracy {} Test Accuracy {}".format(
                            epoch, valid_acc, test_acc
                        )
                    )
                    if best_accuracy < valid_acc:
                        best_accuracy = valid_acc
                        torch.save(model.state_dict(), best_model_path)
                    model.train()

                    # Note that this tutorial do not train the whole model to the end.
                    break






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/2278 [00:00<?, ?it/s]      0%|          | 1/2278 [00:00<24:59,  1.52it/s, loss=26.880]      0%|          | 2/2278 [00:01<25:36,  1.48it/s, loss=19.088]      0%|          | 3/2278 [00:02<25:46,  1.47it/s, loss=13.490]      0%|          | 4/2278 [00:02<25:48,  1.47it/s, loss=9.297]       0%|          | 5/2278 [00:03<26:14,  1.44it/s, loss=6.331]      0%|          | 6/2278 [00:04<25:38,  1.48it/s, loss=4.303]      0%|          | 7/2278 [00:04<25:26,  1.49it/s, loss=2.940]      0%|          | 8/2278 [00:05<25:28,  1.48it/s, loss=2.084]      0%|          | 9/2278 [00:06<26:09,  1.45it/s, loss=1.600]      0%|          | 10/2278 [00:06<26:01,  1.45it/s, loss=1.357]      0%|          | 11/2278 [00:07<25:49,  1.46it/s, loss=1.274]      1%|          | 12/2278 [00:08<26:19,  1.43it/s, loss=1.250]      1%|          | 13/2278 [00:08<25:57,  1.45it/s, loss=1.232]      1%|          | 14/2278 [00:09<25:20,  1.49it/s, loss=1.182]      1%|          | 15/2278 [00:10<26:20,  1.43it/s, loss=1.131]      1%|          | 16/2278 [00:10<26:20,  1.43it/s, loss=1.075]      1%|          | 17/2278 [00:11<26:02,  1.45it/s, loss=1.008]      1%|          | 18/2278 [00:12<25:48,  1.46it/s, loss=0.952]      1%|          | 19/2278 [00:12<25:13,  1.49it/s, loss=0.897]      1%|          | 20/2278 [00:13<25:20,  1.49it/s, loss=0.860]      1%|          | 21/2278 [00:14<25:51,  1.45it/s, loss=0.828]      1%|          | 22/2278 [00:15<26:02,  1.44it/s, loss=0.799]      1%|          | 23/2278 [00:15<25:51,  1.45it/s, loss=0.773]      1%|          | 24/2278 [00:16<25:44,  1.46it/s, loss=0.764]      1%|          | 25/2278 [00:17<25:30,  1.47it/s, loss=0.755]      1%|          | 26/2278 [00:17<24:49,  1.51it/s, loss=0.743]      1%|          | 27/2278 [00:18<25:27,  1.47it/s, loss=0.732]      1%|          | 28/2278 [00:19<25:15,  1.49it/s, loss=0.730]      1%|▏         | 29/2278 [00:19<24:54,  1.50it/s, loss=0.723]      1%|▏         | 30/2278 [00:20<24:34,  1.52it/s, loss=0.718]      1%|▏         | 31/2278 [00:21<24:32,  1.53it/s, loss=0.715]      1%|▏         | 32/2278 [00:21<24:29,  1.53it/s, loss=0.718]      1%|▏         | 33/2278 [00:22<24:27,  1.53it/s, loss=0.713]      1%|▏         | 34/2278 [00:22<24:34,  1.52it/s, loss=0.711]      2%|▏         | 35/2278 [00:23<24:27,  1.53it/s, loss=0.711]      2%|▏         | 36/2278 [00:24<24:38,  1.52it/s, loss=0.709]      2%|▏         | 37/2278 [00:25<25:54,  1.44it/s, loss=0.704]      2%|▏         | 38/2278 [00:25<25:58,  1.44it/s, loss=0.702]      2%|▏         | 39/2278 [00:26<25:34,  1.46it/s, loss=0.700]      2%|▏         | 40/2278 [00:27<25:45,  1.45it/s, loss=0.696]      2%|▏         | 41/2278 [00:27<24:59,  1.49it/s, loss=0.695]      2%|▏         | 42/2278 [00:28<25:18,  1.47it/s, loss=0.692]      2%|▏         | 43/2278 [00:29<25:03,  1.49it/s, loss=0.686]      2%|▏         | 44/2278 [00:29<24:50,  1.50it/s, loss=0.693]      2%|▏         | 45/2278 [00:30<24:48,  1.50it/s, loss=0.691]      2%|▏         | 46/2278 [00:31<25:25,  1.46it/s, loss=0.692]      2%|▏         | 47/2278 [00:31<25:18,  1.47it/s, loss=0.690]      2%|▏         | 48/2278 [00:32<25:43,  1.44it/s, loss=0.687]      2%|▏         | 49/2278 [00:33<25:56,  1.43it/s, loss=0.686]      2%|▏         | 50/2278 [00:33<25:39,  1.45it/s, loss=0.683]      2%|▏         | 51/2278 [00:34<25:03,  1.48it/s, loss=0.680]      2%|▏         | 52/2278 [00:35<24:26,  1.52it/s, loss=0.680]      2%|▏         | 53/2278 [00:35<24:37,  1.51it/s, loss=0.680]      2%|▏         | 54/2278 [00:36<24:47,  1.50it/s, loss=0.679]      2%|▏         | 55/2278 [00:37<25:15,  1.47it/s, loss=0.675]      2%|▏         | 56/2278 [00:37<24:48,  1.49it/s, loss=0.679]      3%|▎         | 57/2278 [00:38<25:19,  1.46it/s, loss=0.674]      3%|▎         | 58/2278 [00:39<25:27,  1.45it/s, loss=0.676]      3%|▎         | 59/2278 [00:40<25:32,  1.45it/s, loss=0.680]      3%|▎         | 60/2278 [00:40<26:25,  1.40it/s, loss=0.674]      3%|▎         | 61/2278 [00:41<26:00,  1.42it/s, loss=0.679]      3%|▎         | 62/2278 [00:42<25:28,  1.45it/s, loss=0.676]      3%|▎         | 63/2278 [00:42<25:31,  1.45it/s, loss=0.678]      3%|▎         | 64/2278 [00:43<25:03,  1.47it/s, loss=0.674]      3%|▎         | 65/2278 [00:44<25:34,  1.44it/s, loss=0.675]      3%|▎         | 66/2278 [00:44<25:18,  1.46it/s, loss=0.675]      3%|▎         | 67/2278 [00:45<26:10,  1.41it/s, loss=0.675]      3%|▎         | 68/2278 [00:46<26:14,  1.40it/s, loss=0.676]      3%|▎         | 69/2278 [00:47<25:44,  1.43it/s, loss=0.673]      3%|▎         | 70/2278 [00:47<24:59,  1.47it/s, loss=0.675]      3%|▎         | 71/2278 [00:48<26:11,  1.40it/s, loss=0.672]      3%|▎         | 72/2278 [00:49<25:47,  1.43it/s, loss=0.673]      3%|▎         | 73/2278 [00:49<24:42,  1.49it/s, loss=0.672]      3%|▎         | 74/2278 [00:50<25:05,  1.46it/s, loss=0.674]      3%|▎         | 75/2278 [00:51<25:10,  1.46it/s, loss=0.672]      3%|▎         | 76/2278 [00:51<24:38,  1.49it/s, loss=0.673]      3%|▎         | 77/2278 [00:52<24:14,  1.51it/s, loss=0.674]      3%|▎         | 78/2278 [00:53<24:26,  1.50it/s, loss=0.669]      3%|▎         | 79/2278 [00:53<24:53,  1.47it/s, loss=0.671]      4%|▎         | 80/2278 [00:54<24:53,  1.47it/s, loss=0.672]      4%|▎         | 81/2278 [00:55<25:27,  1.44it/s, loss=0.676]      4%|▎         | 82/2278 [00:55<24:53,  1.47it/s, loss=0.673]      4%|▎         | 83/2278 [00:56<25:31,  1.43it/s, loss=0.667]      4%|▎         | 84/2278 [00:57<25:07,  1.46it/s, loss=0.670]      4%|▎         | 85/2278 [00:57<25:00,  1.46it/s, loss=0.672]      4%|▍         | 86/2278 [00:58<24:36,  1.48it/s, loss=0.673]      4%|▍         | 87/2278 [00:59<24:50,  1.47it/s, loss=0.670]      4%|▍         | 88/2278 [00:59<24:32,  1.49it/s, loss=0.667]      4%|▍         | 89/2278 [01:00<24:47,  1.47it/s, loss=0.667]      4%|▍         | 90/2278 [01:01<24:42,  1.48it/s, loss=0.667]      4%|▍         | 91/2278 [01:01<24:39,  1.48it/s, loss=0.670]      4%|▍         | 92/2278 [01:02<24:43,  1.47it/s, loss=0.665]      4%|▍         | 93/2278 [01:03<25:25,  1.43it/s, loss=0.665]      4%|▍         | 94/2278 [01:04<25:16,  1.44it/s, loss=0.674]      4%|▍         | 95/2278 [01:04<25:46,  1.41it/s, loss=0.670]      4%|▍         | 96/2278 [01:05<24:58,  1.46it/s, loss=0.667]      4%|▍         | 97/2278 [01:06<24:45,  1.47it/s, loss=0.666]      4%|▍         | 98/2278 [01:06<24:37,  1.48it/s, loss=0.670]      4%|▍         | 99/2278 [01:07<24:44,  1.47it/s, loss=0.668]      4%|▍         | 100/2278 [01:08<24:24,  1.49it/s, loss=0.671]      4%|▍         | 101/2278 [01:08<24:02,  1.51it/s, loss=0.669]      4%|▍         | 102/2278 [01:09<23:59,  1.51it/s, loss=0.670]      5%|▍         | 103/2278 [01:10<24:18,  1.49it/s, loss=0.671]      5%|▍         | 104/2278 [01:10<23:55,  1.51it/s, loss=0.666]      5%|▍         | 105/2278 [01:11<24:01,  1.51it/s, loss=0.669]      5%|▍         | 106/2278 [01:12<24:13,  1.49it/s, loss=0.669]      5%|▍         | 107/2278 [01:12<24:09,  1.50it/s, loss=0.665]      5%|▍         | 108/2278 [01:13<24:35,  1.47it/s, loss=0.666]      5%|▍         | 109/2278 [01:14<24:47,  1.46it/s, loss=0.672]      5%|▍         | 110/2278 [01:14<24:01,  1.50it/s, loss=0.666]      5%|▍         | 111/2278 [01:15<24:01,  1.50it/s, loss=0.668]      5%|▍         | 112/2278 [01:16<24:28,  1.47it/s, loss=0.667]      5%|▍         | 113/2278 [01:16<23:59,  1.50it/s, loss=0.667]      5%|▌         | 114/2278 [01:17<23:38,  1.53it/s, loss=0.665]      5%|▌         | 115/2278 [01:18<24:06,  1.50it/s, loss=0.663]      5%|▌         | 116/2278 [01:18<24:03,  1.50it/s, loss=0.662]      5%|▌         | 117/2278 [01:19<23:55,  1.51it/s, loss=0.667]      5%|▌         | 118/2278 [01:20<23:51,  1.51it/s, loss=0.666]      5%|▌         | 119/2278 [01:20<24:03,  1.50it/s, loss=0.668]      5%|▌         | 120/2278 [01:21<23:56,  1.50it/s, loss=0.664]      5%|▌         | 121/2278 [01:22<23:49,  1.51it/s, loss=0.666]      5%|▌         | 122/2278 [01:22<24:10,  1.49it/s, loss=0.666]      5%|▌         | 123/2278 [01:23<24:16,  1.48it/s, loss=0.666]      5%|▌         | 124/2278 [01:24<24:10,  1.49it/s, loss=0.662]      5%|▌         | 125/2278 [01:24<24:22,  1.47it/s, loss=0.667]      6%|▌         | 126/2278 [01:25<24:42,  1.45it/s, loss=0.667]      6%|▌         | 127/2278 [01:26<24:44,  1.45it/s, loss=0.665]      6%|▌         | 128/2278 [01:26<24:40,  1.45it/s, loss=0.669]      6%|▌         | 129/2278 [01:27<23:59,  1.49it/s, loss=0.665]      6%|▌         | 130/2278 [01:28<23:35,  1.52it/s, loss=0.663]      6%|▌         | 131/2278 [01:28<23:26,  1.53it/s, loss=0.667]      6%|▌         | 132/2278 [01:29<23:53,  1.50it/s, loss=0.668]      6%|▌         | 133/2278 [01:30<24:11,  1.48it/s, loss=0.664]      6%|▌         | 134/2278 [01:30<24:01,  1.49it/s, loss=0.666]      6%|▌         | 135/2278 [01:31<24:03,  1.48it/s, loss=0.665]      6%|▌         | 136/2278 [01:32<24:22,  1.46it/s, loss=0.663]      6%|▌         | 137/2278 [01:33<24:55,  1.43it/s, loss=0.663]      6%|▌         | 138/2278 [01:33<24:40,  1.45it/s, loss=0.664]      6%|▌         | 139/2278 [01:34<23:53,  1.49it/s, loss=0.663]      6%|▌         | 140/2278 [01:34<23:42,  1.50it/s, loss=0.666]      6%|▌         | 141/2278 [01:35<23:57,  1.49it/s, loss=0.670]      6%|▌         | 142/2278 [01:36<24:37,  1.45it/s, loss=0.664]      6%|▋         | 143/2278 [01:37<24:30,  1.45it/s, loss=0.663]      6%|▋         | 144/2278 [01:37<24:19,  1.46it/s, loss=0.665]      6%|▋         | 145/2278 [01:38<23:59,  1.48it/s, loss=0.663]      6%|▋         | 146/2278 [01:39<24:41,  1.44it/s, loss=0.663]      6%|▋         | 147/2278 [01:39<24:26,  1.45it/s, loss=0.663]      6%|▋         | 148/2278 [01:40<24:16,  1.46it/s, loss=0.666]      7%|▋         | 149/2278 [01:41<24:28,  1.45it/s, loss=0.668]      7%|▋         | 150/2278 [01:41<24:02,  1.48it/s, loss=0.668]      7%|▋         | 151/2278 [01:42<23:54,  1.48it/s, loss=0.668]      7%|▋         | 152/2278 [01:43<23:51,  1.49it/s, loss=0.662]      7%|▋         | 153/2278 [01:43<23:57,  1.48it/s, loss=0.663]      7%|▋         | 154/2278 [01:44<23:26,  1.51it/s, loss=0.664]      7%|▋         | 155/2278 [01:45<23:33,  1.50it/s, loss=0.668]      7%|▋         | 156/2278 [01:45<23:41,  1.49it/s, loss=0.664]      7%|▋         | 157/2278 [01:46<23:16,  1.52it/s, loss=0.663]      7%|▋         | 158/2278 [01:47<23:43,  1.49it/s, loss=0.666]      7%|▋         | 159/2278 [01:47<23:58,  1.47it/s, loss=0.664]      7%|▋         | 160/2278 [01:48<23:52,  1.48it/s, loss=0.660]      7%|▋         | 161/2278 [01:49<23:38,  1.49it/s, loss=0.657]      7%|▋         | 162/2278 [01:49<24:17,  1.45it/s, loss=0.659]      7%|▋         | 163/2278 [01:50<23:57,  1.47it/s, loss=0.659]      7%|▋         | 164/2278 [01:51<24:06,  1.46it/s, loss=0.665]      7%|▋         | 165/2278 [01:51<23:40,  1.49it/s, loss=0.669]      7%|▋         | 166/2278 [01:52<23:48,  1.48it/s, loss=0.664]      7%|▋         | 167/2278 [01:53<24:33,  1.43it/s, loss=0.662]      7%|▋         | 168/2278 [01:54<24:58,  1.41it/s, loss=0.665]      7%|▋         | 169/2278 [01:54<24:42,  1.42it/s, loss=0.664]      7%|▋         | 170/2278 [01:55<24:14,  1.45it/s, loss=0.666]      8%|▊         | 171/2278 [01:56<23:48,  1.48it/s, loss=0.664]      8%|▊         | 172/2278 [01:56<24:24,  1.44it/s, loss=0.664]      8%|▊         | 173/2278 [01:57<24:09,  1.45it/s, loss=0.668]      8%|▊         | 174/2278 [01:58<24:21,  1.44it/s, loss=0.667]      8%|▊         | 175/2278 [01:58<24:18,  1.44it/s, loss=0.665]      8%|▊         | 176/2278 [01:59<23:56,  1.46it/s, loss=0.666]      8%|▊         | 177/2278 [02:00<24:02,  1.46it/s, loss=0.664]      8%|▊         | 178/2278 [02:00<23:49,  1.47it/s, loss=0.668]      8%|▊         | 179/2278 [02:01<24:05,  1.45it/s, loss=0.665]      8%|▊         | 180/2278 [02:02<23:58,  1.46it/s, loss=0.662]      8%|▊         | 181/2278 [02:03<24:07,  1.45it/s, loss=0.668]      8%|▊         | 182/2278 [02:03<24:29,  1.43it/s, loss=0.659]      8%|▊         | 183/2278 [02:04<24:01,  1.45it/s, loss=0.663]      8%|▊         | 184/2278 [02:05<23:36,  1.48it/s, loss=0.662]      8%|▊         | 185/2278 [02:05<23:18,  1.50it/s, loss=0.661]      8%|▊         | 186/2278 [02:06<23:48,  1.46it/s, loss=0.663]      8%|▊         | 187/2278 [02:07<23:54,  1.46it/s, loss=0.667]      8%|▊         | 188/2278 [02:07<23:48,  1.46it/s, loss=0.660]      8%|▊         | 189/2278 [02:08<23:59,  1.45it/s, loss=0.662]      8%|▊         | 190/2278 [02:09<23:45,  1.47it/s, loss=0.660]      8%|▊         | 191/2278 [02:09<23:48,  1.46it/s, loss=0.665]      8%|▊         | 192/2278 [02:10<23:22,  1.49it/s, loss=0.657]      8%|▊         | 193/2278 [02:11<23:33,  1.47it/s, loss=0.667]      9%|▊         | 194/2278 [02:11<23:02,  1.51it/s, loss=0.659]      9%|▊         | 195/2278 [02:12<23:31,  1.48it/s, loss=0.664]      9%|▊         | 196/2278 [02:13<22:57,  1.51it/s, loss=0.663]      9%|▊         | 197/2278 [02:13<22:51,  1.52it/s, loss=0.661]      9%|▊         | 198/2278 [02:14<23:12,  1.49it/s, loss=0.663]      9%|▊         | 199/2278 [02:15<23:44,  1.46it/s, loss=0.659]      9%|▉         | 200/2278 [02:16<24:42,  1.40it/s, loss=0.661]      9%|▉         | 201/2278 [02:16<24:26,  1.42it/s, loss=0.660]      9%|▉         | 202/2278 [02:17<24:16,  1.43it/s, loss=0.660]      9%|▉         | 203/2278 [02:18<23:42,  1.46it/s, loss=0.661]      9%|▉         | 204/2278 [02:18<24:00,  1.44it/s, loss=0.657]      9%|▉         | 205/2278 [02:19<23:57,  1.44it/s, loss=0.665]      9%|▉         | 206/2278 [02:20<24:10,  1.43it/s, loss=0.659]      9%|▉         | 207/2278 [02:20<23:58,  1.44it/s, loss=0.662]      9%|▉         | 208/2278 [02:21<23:55,  1.44it/s, loss=0.661]      9%|▉         | 209/2278 [02:22<23:27,  1.47it/s, loss=0.665]      9%|▉         | 210/2278 [02:22<23:06,  1.49it/s, loss=0.663]      9%|▉         | 211/2278 [02:23<23:09,  1.49it/s, loss=0.669]      9%|▉         | 212/2278 [02:24<23:27,  1.47it/s, loss=0.664]      9%|▉         | 213/2278 [02:24<23:10,  1.49it/s, loss=0.661]      9%|▉         | 214/2278 [02:25<23:56,  1.44it/s, loss=0.659]      9%|▉         | 215/2278 [02:26<23:59,  1.43it/s, loss=0.663]      9%|▉         | 216/2278 [02:26<23:31,  1.46it/s, loss=0.664]     10%|▉         | 217/2278 [02:27<23:22,  1.47it/s, loss=0.659]     10%|▉         | 218/2278 [02:28<23:02,  1.49it/s, loss=0.661]     10%|▉         | 219/2278 [02:28<22:04,  1.55it/s, loss=0.667]     10%|▉         | 220/2278 [02:29<23:07,  1.48it/s, loss=0.664]     10%|▉         | 221/2278 [02:30<23:17,  1.47it/s, loss=0.663]     10%|▉         | 222/2278 [02:30<22:40,  1.51it/s, loss=0.666]     10%|▉         | 223/2278 [02:31<22:59,  1.49it/s, loss=0.661]     10%|▉         | 224/2278 [02:32<23:13,  1.47it/s, loss=0.665]     10%|▉         | 225/2278 [02:33<23:11,  1.48it/s, loss=0.662]     10%|▉         | 226/2278 [02:33<23:03,  1.48it/s, loss=0.666]     10%|▉         | 227/2278 [02:34<22:59,  1.49it/s, loss=0.657]     10%|█         | 228/2278 [02:35<23:04,  1.48it/s, loss=0.662]     10%|█         | 229/2278 [02:35<22:55,  1.49it/s, loss=0.665]     10%|█         | 230/2278 [02:36<23:13,  1.47it/s, loss=0.659]     10%|█         | 231/2278 [02:37<23:20,  1.46it/s, loss=0.666]     10%|█         | 232/2278 [02:37<23:11,  1.47it/s, loss=0.660]     10%|█         | 233/2278 [02:38<22:56,  1.49it/s, loss=0.669]     10%|█         | 234/2278 [02:39<23:32,  1.45it/s, loss=0.664]     10%|█         | 235/2278 [02:39<23:32,  1.45it/s, loss=0.652]     10%|█         | 236/2278 [02:40<23:37,  1.44it/s, loss=0.658]     10%|█         | 237/2278 [02:41<23:03,  1.48it/s, loss=0.665]     10%|█         | 238/2278 [02:41<22:09,  1.53it/s, loss=0.662]     10%|█         | 239/2278 [02:42<22:20,  1.52it/s, loss=0.661]     11%|█         | 240/2278 [02:43<22:32,  1.51it/s, loss=0.654]     11%|█         | 241/2278 [02:43<22:18,  1.52it/s, loss=0.654]     11%|█         | 242/2278 [02:44<22:23,  1.51it/s, loss=0.660]     11%|█         | 243/2278 [02:45<23:10,  1.46it/s, loss=0.665]     11%|█         | 244/2278 [02:45<23:48,  1.42it/s, loss=0.662]     11%|█         | 245/2278 [02:46<23:18,  1.45it/s, loss=0.655]     11%|█         | 246/2278 [02:47<23:10,  1.46it/s, loss=0.660]     11%|█         | 247/2278 [02:47<23:08,  1.46it/s, loss=0.656]     11%|█         | 248/2278 [02:48<23:35,  1.43it/s, loss=0.657]     11%|█         | 249/2278 [02:49<23:45,  1.42it/s, loss=0.664]     11%|█         | 250/2278 [02:50<23:32,  1.44it/s, loss=0.662]     11%|█         | 251/2278 [02:50<22:26,  1.51it/s, loss=0.656]     11%|█         | 252/2278 [02:51<22:46,  1.48it/s, loss=0.663]     11%|█         | 253/2278 [02:52<22:55,  1.47it/s, loss=0.660]     11%|█         | 254/2278 [02:52<23:55,  1.41it/s, loss=0.659]     11%|█         | 255/2278 [02:53<23:07,  1.46it/s, loss=0.665]     11%|█         | 256/2278 [02:54<23:00,  1.46it/s, loss=0.660]     11%|█▏        | 257/2278 [02:54<23:08,  1.46it/s, loss=0.662]     11%|█▏        | 258/2278 [02:55<22:52,  1.47it/s, loss=0.662]     11%|█▏        | 259/2278 [02:56<22:18,  1.51it/s, loss=0.663]     11%|█▏        | 260/2278 [02:56<22:11,  1.52it/s, loss=0.664]     11%|█▏        | 261/2278 [02:57<22:47,  1.48it/s, loss=0.663]     12%|█▏        | 262/2278 [02:58<22:46,  1.48it/s, loss=0.661]     12%|█▏        | 263/2278 [02:58<22:49,  1.47it/s, loss=0.658]     12%|█▏        | 264/2278 [02:59<23:02,  1.46it/s, loss=0.660]     12%|█▏        | 265/2278 [03:00<22:47,  1.47it/s, loss=0.661]     12%|█▏        | 266/2278 [03:00<22:56,  1.46it/s, loss=0.663]     12%|█▏        | 267/2278 [03:01<23:29,  1.43it/s, loss=0.659]     12%|█▏        | 268/2278 [03:02<23:04,  1.45it/s, loss=0.661]     12%|█▏        | 269/2278 [03:03<23:40,  1.41it/s, loss=0.659]     12%|█▏        | 270/2278 [03:03<23:51,  1.40it/s, loss=0.661]     12%|█▏        | 271/2278 [03:04<24:22,  1.37it/s, loss=0.657]     12%|█▏        | 272/2278 [03:05<23:14,  1.44it/s, loss=0.661]     12%|█▏        | 273/2278 [03:05<23:03,  1.45it/s, loss=0.658]     12%|█▏        | 274/2278 [03:06<22:48,  1.46it/s, loss=0.661]     12%|█▏        | 275/2278 [03:07<22:43,  1.47it/s, loss=0.659]     12%|█▏        | 276/2278 [03:07<22:25,  1.49it/s, loss=0.661]     12%|█▏        | 277/2278 [03:08<22:35,  1.48it/s, loss=0.660]     12%|█▏        | 278/2278 [03:09<22:29,  1.48it/s, loss=0.659]     12%|█▏        | 279/2278 [03:09<22:15,  1.50it/s, loss=0.663]     12%|█▏        | 280/2278 [03:10<22:24,  1.49it/s, loss=0.662]     12%|█▏        | 281/2278 [03:11<22:25,  1.48it/s, loss=0.662]     12%|█▏        | 282/2278 [03:11<22:55,  1.45it/s, loss=0.661]     12%|█▏        | 283/2278 [03:12<22:42,  1.46it/s, loss=0.659]     12%|█▏        | 284/2278 [03:13<22:17,  1.49it/s, loss=0.663]     13%|█▎        | 285/2278 [03:13<22:24,  1.48it/s, loss=0.664]     13%|█▎        | 286/2278 [03:14<22:09,  1.50it/s, loss=0.666]     13%|█▎        | 287/2278 [03:15<22:15,  1.49it/s, loss=0.663]     13%|█▎        | 288/2278 [03:15<22:01,  1.51it/s, loss=0.659]     13%|█▎        | 289/2278 [03:16<21:55,  1.51it/s, loss=0.657]     13%|█▎        | 290/2278 [03:17<21:34,  1.54it/s, loss=0.660]     13%|█▎        | 291/2278 [03:17<22:00,  1.51it/s, loss=0.661]     13%|█▎        | 292/2278 [03:18<22:14,  1.49it/s, loss=0.658]     13%|█▎        | 293/2278 [03:19<22:40,  1.46it/s, loss=0.653]     13%|█▎        | 294/2278 [03:19<22:55,  1.44it/s, loss=0.660]     13%|█▎        | 295/2278 [03:20<22:43,  1.45it/s, loss=0.659]     13%|█▎        | 296/2278 [03:21<22:51,  1.45it/s, loss=0.662]     13%|█▎        | 297/2278 [03:22<22:39,  1.46it/s, loss=0.661]     13%|█▎        | 298/2278 [03:22<23:19,  1.41it/s, loss=0.659]     13%|█▎        | 299/2278 [03:23<23:05,  1.43it/s, loss=0.656]     13%|█▎        | 300/2278 [03:24<23:17,  1.42it/s, loss=0.657]     13%|█▎        | 301/2278 [03:24<23:27,  1.40it/s, loss=0.660]     13%|█▎        | 302/2278 [03:25<23:33,  1.40it/s, loss=0.660]     13%|█▎        | 303/2278 [03:26<23:29,  1.40it/s, loss=0.660]     13%|█▎        | 304/2278 [03:26<22:53,  1.44it/s, loss=0.660]     13%|█▎        | 305/2278 [03:27<23:35,  1.39it/s, loss=0.666]     13%|█▎        | 306/2278 [03:28<22:42,  1.45it/s, loss=0.662]     13%|█▎        | 307/2278 [03:29<22:16,  1.47it/s, loss=0.657]     14%|█▎        | 308/2278 [03:29<21:52,  1.50it/s, loss=0.657]     14%|█▎        | 309/2278 [03:30<22:43,  1.44it/s, loss=0.658]     14%|█▎        | 310/2278 [03:31<22:34,  1.45it/s, loss=0.655]     14%|█▎        | 311/2278 [03:31<22:26,  1.46it/s, loss=0.657]     14%|█▎        | 312/2278 [03:32<22:19,  1.47it/s, loss=0.656]     14%|█▎        | 313/2278 [03:33<22:21,  1.47it/s, loss=0.665]     14%|█▍        | 314/2278 [03:33<22:35,  1.45it/s, loss=0.659]     14%|█▍        | 315/2278 [03:34<22:03,  1.48it/s, loss=0.663]     14%|█▍        | 316/2278 [03:35<22:00,  1.49it/s, loss=0.658]     14%|█▍        | 317/2278 [03:35<22:09,  1.48it/s, loss=0.656]     14%|█▍        | 318/2278 [03:36<22:50,  1.43it/s, loss=0.664]     14%|█▍        | 319/2278 [03:37<22:57,  1.42it/s, loss=0.660]     14%|█▍        | 320/2278 [03:37<21:54,  1.49it/s, loss=0.662]     14%|█▍        | 321/2278 [03:38<21:52,  1.49it/s, loss=0.657]     14%|█▍        | 322/2278 [03:39<21:51,  1.49it/s, loss=0.659]     14%|█▍        | 323/2278 [03:39<21:44,  1.50it/s, loss=0.661]     14%|█▍        | 324/2278 [03:40<21:42,  1.50it/s, loss=0.661]     14%|█▍        | 325/2278 [03:41<22:06,  1.47it/s, loss=0.658]     14%|█▍        | 326/2278 [03:41<22:20,  1.46it/s, loss=0.660]     14%|█▍        | 327/2278 [03:42<22:09,  1.47it/s, loss=0.663]     14%|█▍        | 328/2278 [03:43<22:04,  1.47it/s, loss=0.652]     14%|█▍        | 329/2278 [03:43<21:38,  1.50it/s, loss=0.659]     14%|█▍        | 330/2278 [03:44<21:19,  1.52it/s, loss=0.660]     15%|█▍        | 331/2278 [03:45<22:09,  1.46it/s, loss=0.658]     15%|█▍        | 332/2278 [03:46<22:14,  1.46it/s, loss=0.658]     15%|█▍        | 333/2278 [03:46<21:57,  1.48it/s, loss=0.656]     15%|█▍        | 334/2278 [03:47<22:39,  1.43it/s, loss=0.658]     15%|█▍        | 335/2278 [03:48<22:41,  1.43it/s, loss=0.661]     15%|█▍        | 336/2278 [03:48<22:15,  1.45it/s, loss=0.653]     15%|█▍        | 337/2278 [03:49<22:03,  1.47it/s, loss=0.657]     15%|█▍        | 338/2278 [03:50<22:09,  1.46it/s, loss=0.660]     15%|█▍        | 339/2278 [03:50<22:14,  1.45it/s, loss=0.662]     15%|█▍        | 340/2278 [03:51<21:54,  1.47it/s, loss=0.656]     15%|█▍        | 341/2278 [03:52<21:39,  1.49it/s, loss=0.657]     15%|█▌        | 342/2278 [03:52<22:01,  1.46it/s, loss=0.665]     15%|█▌        | 343/2278 [03:53<21:27,  1.50it/s, loss=0.657]     15%|█▌        | 344/2278 [03:54<21:35,  1.49it/s, loss=0.663]     15%|█▌        | 345/2278 [03:54<21:18,  1.51it/s, loss=0.656]     15%|█▌        | 346/2278 [03:55<21:17,  1.51it/s, loss=0.659]     15%|█▌        | 347/2278 [03:56<21:23,  1.50it/s, loss=0.658]     15%|█▌        | 348/2278 [03:56<21:39,  1.49it/s, loss=0.661]     15%|█▌        | 349/2278 [03:57<21:45,  1.48it/s, loss=0.660]     15%|█▌        | 350/2278 [03:58<21:36,  1.49it/s, loss=0.655]     15%|█▌        | 351/2278 [03:58<20:59,  1.53it/s, loss=0.661]     15%|█▌        | 352/2278 [03:59<21:08,  1.52it/s, loss=0.653]     15%|█▌        | 353/2278 [04:00<21:58,  1.46it/s, loss=0.657]     16%|█▌        | 354/2278 [04:00<21:49,  1.47it/s, loss=0.666]     16%|█▌        | 355/2278 [04:01<21:35,  1.48it/s, loss=0.660]     16%|█▌        | 356/2278 [04:02<21:28,  1.49it/s, loss=0.661]     16%|█▌        | 357/2278 [04:02<21:25,  1.49it/s, loss=0.654]     16%|█▌        | 358/2278 [04:03<21:42,  1.47it/s, loss=0.658]     16%|█▌        | 359/2278 [04:04<21:18,  1.50it/s, loss=0.655]     16%|█▌        | 360/2278 [04:04<21:14,  1.50it/s, loss=0.664]     16%|█▌        | 361/2278 [04:05<21:15,  1.50it/s, loss=0.660]     16%|█▌        | 362/2278 [04:06<21:34,  1.48it/s, loss=0.655]     16%|█▌        | 363/2278 [04:06<21:44,  1.47it/s, loss=0.658]     16%|█▌        | 364/2278 [04:07<21:41,  1.47it/s, loss=0.659]     16%|█▌        | 365/2278 [04:08<22:06,  1.44it/s, loss=0.660]     16%|█▌        | 366/2278 [04:08<21:35,  1.48it/s, loss=0.655]     16%|█▌        | 367/2278 [04:09<21:28,  1.48it/s, loss=0.660]     16%|█▌        | 368/2278 [04:10<21:12,  1.50it/s, loss=0.660]     16%|█▌        | 369/2278 [04:11<21:37,  1.47it/s, loss=0.652]     16%|█▌        | 370/2278 [04:11<21:15,  1.50it/s, loss=0.659]     16%|█▋        | 371/2278 [04:12<21:35,  1.47it/s, loss=0.658]     16%|█▋        | 372/2278 [04:12<21:00,  1.51it/s, loss=0.665]     16%|█▋        | 373/2278 [04:13<20:33,  1.54it/s, loss=0.659]     16%|█▋        | 374/2278 [04:14<21:11,  1.50it/s, loss=0.655]     16%|█▋        | 375/2278 [04:14<20:55,  1.52it/s, loss=0.655]     17%|█▋        | 376/2278 [04:15<21:22,  1.48it/s, loss=0.658]     17%|█▋        | 377/2278 [04:16<20:57,  1.51it/s, loss=0.659]     17%|█▋        | 378/2278 [04:17<21:50,  1.45it/s, loss=0.662]     17%|█▋        | 379/2278 [04:17<21:44,  1.46it/s, loss=0.662]     17%|█▋        | 380/2278 [04:18<22:37,  1.40it/s, loss=0.662]     17%|█▋        | 381/2278 [04:19<21:58,  1.44it/s, loss=0.663]     17%|█▋        | 382/2278 [04:19<21:36,  1.46it/s, loss=0.662]     17%|█▋        | 383/2278 [04:20<22:02,  1.43it/s, loss=0.657]     17%|█▋        | 384/2278 [04:21<21:19,  1.48it/s, loss=0.663]     17%|█▋        | 385/2278 [04:21<21:14,  1.49it/s, loss=0.657]     17%|█▋        | 386/2278 [04:22<20:56,  1.51it/s, loss=0.658]     17%|█▋        | 387/2278 [04:23<21:42,  1.45it/s, loss=0.656]     17%|█▋        | 388/2278 [04:23<21:32,  1.46it/s, loss=0.658]     17%|█▋        | 389/2278 [04:24<21:34,  1.46it/s, loss=0.656]     17%|█▋        | 390/2278 [04:25<21:37,  1.45it/s, loss=0.659]     17%|█▋        | 391/2278 [04:25<21:12,  1.48it/s, loss=0.660]     17%|█▋        | 392/2278 [04:26<20:54,  1.50it/s, loss=0.658]     17%|█▋        | 393/2278 [04:27<20:17,  1.55it/s, loss=0.656]     17%|█▋        | 394/2278 [04:27<21:51,  1.44it/s, loss=0.662]     17%|█▋        | 395/2278 [04:28<21:58,  1.43it/s, loss=0.654]     17%|█▋        | 396/2278 [04:29<21:29,  1.46it/s, loss=0.658]     17%|█▋        | 397/2278 [04:30<21:17,  1.47it/s, loss=0.654]     17%|█▋        | 398/2278 [04:30<21:51,  1.43it/s, loss=0.658]     18%|█▊        | 399/2278 [04:31<21:27,  1.46it/s, loss=0.659]     18%|█▊        | 400/2278 [04:32<22:13,  1.41it/s, loss=0.653]     18%|█▊        | 401/2278 [04:32<21:42,  1.44it/s, loss=0.658]     18%|█▊        | 402/2278 [04:33<21:36,  1.45it/s, loss=0.655]     18%|█▊        | 403/2278 [04:34<21:05,  1.48it/s, loss=0.656]     18%|█▊        | 404/2278 [04:34<20:48,  1.50it/s, loss=0.660]     18%|█▊        | 405/2278 [04:35<20:53,  1.49it/s, loss=0.651]     18%|█▊        | 406/2278 [04:36<21:04,  1.48it/s, loss=0.657]     18%|█▊        | 407/2278 [04:36<21:09,  1.47it/s, loss=0.653]     18%|█▊        | 408/2278 [04:37<20:54,  1.49it/s, loss=0.656]     18%|█▊        | 409/2278 [04:38<20:53,  1.49it/s, loss=0.655]     18%|█▊        | 410/2278 [04:38<20:48,  1.50it/s, loss=0.659]     18%|█▊        | 411/2278 [04:39<21:01,  1.48it/s, loss=0.657]     18%|█▊        | 412/2278 [04:40<20:38,  1.51it/s, loss=0.657]     18%|█▊        | 413/2278 [04:40<21:02,  1.48it/s, loss=0.659]     18%|█▊        | 414/2278 [04:41<20:59,  1.48it/s, loss=0.660]     18%|█▊        | 415/2278 [04:42<20:54,  1.48it/s, loss=0.658]     18%|█▊        | 416/2278 [04:42<20:55,  1.48it/s, loss=0.660]     18%|█▊        | 417/2278 [04:43<21:54,  1.42it/s, loss=0.662]     18%|█▊        | 418/2278 [04:44<21:59,  1.41it/s, loss=0.656]     18%|█▊        | 419/2278 [04:45<21:56,  1.41it/s, loss=0.656]     18%|█▊        | 420/2278 [04:45<21:48,  1.42it/s, loss=0.655]     18%|█▊        | 421/2278 [04:46<21:33,  1.44it/s, loss=0.654]     19%|█▊        | 422/2278 [04:47<21:43,  1.42it/s, loss=0.660]     19%|█▊        | 423/2278 [04:47<21:11,  1.46it/s, loss=0.657]     19%|█▊        | 424/2278 [04:48<21:08,  1.46it/s, loss=0.658]     19%|█▊        | 425/2278 [04:49<21:17,  1.45it/s, loss=0.653]     19%|█▊        | 426/2278 [04:49<20:49,  1.48it/s, loss=0.654]     19%|█▊        | 427/2278 [04:50<20:25,  1.51it/s, loss=0.658]     19%|█▉        | 428/2278 [04:51<20:54,  1.47it/s, loss=0.658]     19%|█▉        | 429/2278 [04:51<20:14,  1.52it/s, loss=0.661]     19%|█▉        | 430/2278 [04:52<19:07,  1.61it/s, loss=0.662]     19%|█▉        | 431/2278 [04:53<19:46,  1.56it/s, loss=0.654]     19%|█▉        | 432/2278 [04:53<20:38,  1.49it/s, loss=0.654]     19%|█▉        | 433/2278 [04:54<20:52,  1.47it/s, loss=0.659]     19%|█▉        | 434/2278 [04:55<20:49,  1.48it/s, loss=0.654]     19%|█▉        | 435/2278 [04:55<20:45,  1.48it/s, loss=0.651]     19%|█▉        | 436/2278 [04:56<20:38,  1.49it/s, loss=0.660]     19%|█▉        | 437/2278 [04:57<21:23,  1.43it/s, loss=0.658]     19%|█▉        | 438/2278 [04:57<21:12,  1.45it/s, loss=0.659]     19%|█▉        | 439/2278 [04:58<21:06,  1.45it/s, loss=0.654]     19%|█▉        | 440/2278 [04:59<21:05,  1.45it/s, loss=0.654]     19%|█▉        | 441/2278 [04:59<21:12,  1.44it/s, loss=0.655]     19%|█▉        | 442/2278 [05:00<20:49,  1.47it/s, loss=0.655]     19%|█▉        | 443/2278 [05:01<20:35,  1.49it/s, loss=0.656]     19%|█▉        | 444/2278 [05:01<20:47,  1.47it/s, loss=0.661]     20%|█▉        | 445/2278 [05:02<20:49,  1.47it/s, loss=0.655]     20%|█▉        | 446/2278 [05:03<20:43,  1.47it/s, loss=0.656]     20%|█▉        | 447/2278 [05:03<19:58,  1.53it/s, loss=0.653]     20%|█▉        | 448/2278 [05:04<19:43,  1.55it/s, loss=0.655]     20%|█▉        | 449/2278 [05:05<19:58,  1.53it/s, loss=0.653]     20%|█▉        | 450/2278 [05:05<20:21,  1.50it/s, loss=0.663]     20%|█▉        | 451/2278 [05:06<20:49,  1.46it/s, loss=0.656]     20%|█▉        | 452/2278 [05:07<21:51,  1.39it/s, loss=0.653]     20%|█▉        | 453/2278 [05:08<21:35,  1.41it/s, loss=0.655]     20%|█▉        | 454/2278 [05:08<20:14,  1.50it/s, loss=0.653]     20%|█▉        | 455/2278 [05:09<20:59,  1.45it/s, loss=0.661]     20%|██        | 456/2278 [05:10<20:24,  1.49it/s, loss=0.655]     20%|██        | 457/2278 [05:10<20:00,  1.52it/s, loss=0.651]     20%|██        | 458/2278 [05:11<20:36,  1.47it/s, loss=0.660]     20%|██        | 459/2278 [05:12<20:20,  1.49it/s, loss=0.655]     20%|██        | 460/2278 [05:12<20:18,  1.49it/s, loss=0.656]     20%|██        | 461/2278 [05:13<20:15,  1.49it/s, loss=0.655]     20%|██        | 462/2278 [05:14<20:11,  1.50it/s, loss=0.650]     20%|██        | 463/2278 [05:14<20:31,  1.47it/s, loss=0.652]     20%|██        | 464/2278 [05:15<20:28,  1.48it/s, loss=0.656]     20%|██        | 465/2278 [05:16<20:09,  1.50it/s, loss=0.657]     20%|██        | 466/2278 [05:16<20:04,  1.50it/s, loss=0.657]     21%|██        | 467/2278 [05:17<20:00,  1.51it/s, loss=0.659]     21%|██        | 468/2278 [05:18<19:57,  1.51it/s, loss=0.654]     21%|██        | 469/2278 [05:18<19:57,  1.51it/s, loss=0.659]     21%|██        | 470/2278 [05:19<19:54,  1.51it/s, loss=0.657]     21%|██        | 471/2278 [05:20<19:45,  1.52it/s, loss=0.655]     21%|██        | 472/2278 [05:20<19:43,  1.53it/s, loss=0.652]     21%|██        | 473/2278 [05:21<20:02,  1.50it/s, loss=0.654]     21%|██        | 474/2278 [05:22<20:10,  1.49it/s, loss=0.653]     21%|██        | 475/2278 [05:22<20:26,  1.47it/s, loss=0.651]     21%|██        | 476/2278 [05:23<20:07,  1.49it/s, loss=0.661]     21%|██        | 477/2278 [05:24<20:22,  1.47it/s, loss=0.654]     21%|██        | 478/2278 [05:24<19:53,  1.51it/s, loss=0.652]     21%|██        | 479/2278 [05:25<20:31,  1.46it/s, loss=0.658]     21%|██        | 480/2278 [05:26<20:11,  1.48it/s, loss=0.652]     21%|██        | 481/2278 [05:26<19:41,  1.52it/s, loss=0.655]     21%|██        | 482/2278 [05:27<20:29,  1.46it/s, loss=0.654]     21%|██        | 483/2278 [05:28<20:23,  1.47it/s, loss=0.654]     21%|██        | 484/2278 [05:28<20:02,  1.49it/s, loss=0.655]     21%|██▏       | 485/2278 [05:29<20:01,  1.49it/s, loss=0.659]     21%|██▏       | 486/2278 [05:30<19:55,  1.50it/s, loss=0.654]     21%|██▏       | 487/2278 [05:30<20:34,  1.45it/s, loss=0.654]     21%|██▏       | 488/2278 [05:31<20:50,  1.43it/s, loss=0.655]     21%|██▏       | 489/2278 [05:32<20:09,  1.48it/s, loss=0.651]     22%|██▏       | 490/2278 [05:32<20:32,  1.45it/s, loss=0.654]     22%|██▏       | 491/2278 [05:33<20:36,  1.44it/s, loss=0.652]     22%|██▏       | 492/2278 [05:34<20:56,  1.42it/s, loss=0.659]     22%|██▏       | 493/2278 [05:35<21:06,  1.41it/s, loss=0.660]     22%|██▏       | 494/2278 [05:35<20:49,  1.43it/s, loss=0.661]     22%|██▏       | 495/2278 [05:36<20:45,  1.43it/s, loss=0.654]     22%|██▏       | 496/2278 [05:37<20:30,  1.45it/s, loss=0.652]     22%|██▏       | 497/2278 [05:37<20:07,  1.48it/s, loss=0.657]     22%|██▏       | 498/2278 [05:38<20:11,  1.47it/s, loss=0.646]     22%|██▏       | 499/2278 [05:39<20:41,  1.43it/s, loss=0.650]Converges at iteration 10
    Epoch 0 Validation Accuracy 0.07641196013289037 Test Accuracy 0.059132152336275536
     22%|██▏       | 499/2278 [07:13<25:44,  1.15it/s, loss=0.650]




.. GENERATED FROM PYTHON SOURCE LINES 398-415

Evaluating Performance with Link Prediction (Optional)
------------------------------------------------------

In practice, it is more common to evaluate the link prediction
model to see whether it can predict new edges. There are different
evaluation metrics such as
`AUC <https://en.wikipedia.org/wiki/Receiver_operating_characteristic#Area_under_the_curve>`__
or `various metrics from information retrieval <https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)>`__.
Ultimately, they require the model to predict one scalar score given
a node pair among a set of node pairs.

Assuming that you have the following test set with labels, where
``test_pos_src`` and ``test_pos_dst`` are ground truth node pairs
with edges in between (or *positive* pairs), and ``test_neg_src``
and ``test_neg_dst`` are ground truth node pairs without edges
in between (or *negative* pairs).


.. GENERATED FROM PYTHON SOURCE LINES 415-430

.. code-block:: Python


    # Positive pairs
    # These are randomly generated as an example.  You will need to
    # replace them with your own ground truth.
    n_test_pos = 1000
    test_pos_src, test_pos_dst = (
        torch.randint(0, graph.num_nodes(), (n_test_pos,)),
        torch.randint(0, graph.num_nodes(), (n_test_pos,)),
    )
    # Negative pairs.  Likewise, you will need to replace them with your
    # own ground truth.
    test_neg_src = test_pos_src
    test_neg_dst = torch.randint(0, graph.num_nodes(), (n_test_pos,))









.. GENERATED FROM PYTHON SOURCE LINES 431-434

First you need to compute the node representations for all the nodes
with the ``inference`` method above:


.. GENERATED FROM PYTHON SOURCE LINES 434-437

.. code-block:: Python


    node_reprs = inference(model, graph, node_features)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/ubuntu/regression_test/dgl/python/dgl/dataloading/dataloader.py:1149: DGLWarning: Dataloader CPU affinity opt is not enabled, consider switching it on (see enable_cpu_affinity() or CPU best practices for DGL [https://docs.dgl.ai/tutorials/cpu/cpu_best_practises.html])
      dgl_warning(




.. GENERATED FROM PYTHON SOURCE LINES 438-442

Since the predictor is a dot product, you can now easily compute the
score of positive and negative test pairs to compute metrics such
as AUC:


.. GENERATED FROM PYTHON SOURCE LINES 442-460

.. code-block:: Python


    h_pos_src = node_reprs[test_pos_src]
    h_pos_dst = node_reprs[test_pos_dst]
    h_neg_src = node_reprs[test_neg_src]
    h_neg_dst = node_reprs[test_neg_dst]
    score_pos = (h_pos_src * h_pos_dst).sum(1)
    score_neg = (h_neg_src * h_neg_dst).sum(1)
    test_preds = torch.cat([score_pos, score_neg]).cpu().numpy()
    test_labels = (
        torch.cat([torch.ones_like(score_pos), torch.zeros_like(score_neg)])
        .cpu()
        .numpy()
    )

    auc = sklearn.metrics.roc_auc_score(test_labels, test_preds)
    print("Link Prediction AUC:", auc)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Link Prediction AUC: 0.501099




.. GENERATED FROM PYTHON SOURCE LINES 461-467

Conclusion
----------

In this tutorial, you have learned how to train a multi-layer GraphSAGE
for link prediction with neighbor sampling.


.. GENERATED FROM PYTHON SOURCE LINES 467-471

.. code-block:: Python



    # Thumbnail credits: Link Prediction with Neo4j, Mark Needham
    # sphinx_gallery_thumbnail_path = '_static/blitz_4_link_predict.png'








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (8 minutes 6.876 seconds)


.. _sphx_glr_download_tutorials_large_L2_large_link_prediction.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: L2_large_link_prediction.ipynb <L2_large_link_prediction.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: L2_large_link_prediction.py <L2_large_link_prediction.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: L2_large_link_prediction.zip <L2_large_link_prediction.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
